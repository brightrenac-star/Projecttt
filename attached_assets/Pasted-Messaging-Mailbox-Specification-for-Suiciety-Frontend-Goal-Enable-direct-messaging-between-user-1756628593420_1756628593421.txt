Messaging & Mailbox Specification (for Suiciety Frontend)
Goal

Enable direct messaging between users (e.g., User A → User B). Users should be able to send, receive, and view messages in an Inbox (mailbox). The inbox should only show the most recent message per conversation by default, similar to Instagram’s message list. When the user clicks a conversation, they should see the full chat history.

Pages to Implement
1. Mailbox (messages.html or integrated into profile.html)

Purpose: Central place where each logged-in user sees all their conversations.

Layout:

Header: “Messages” title + back to index.html\n- Conversation List (Inbox):\n - Show one entry per conversation (between the logged-in user and another user)\n - Each item displays:\n - Other user’s avatar & display name\n - Most recent message snippet (truncated text)\n - Timestamp of last message\n - Unread indicator (e.g., blue dot if unread)\n\nAPI:\n- GET /users/me/messages → returns list of conversations with:\n json\n [\n {\n \"id\": \"conv_123\",\n \"otherUser\": { \"id\": \"cmezc7roo...\", \"displayName\": \"User B\", \"avatar\": \"...\" },\n \"lastMessage\": {\n \"text\": \"Hey, are you free?\",\n \"createdAt\": \"2025-08-30T10:15:00Z\",\n \"isRead\": false\n }\n }\n ]\n \n\nInteractions:\n- Click conversation item → navigate to chat.html?user=<otherUserId>\n- Unread indicator disappears when conversation is opened\n\n---\n\n### 2. Chat Page (chat.html)\nPurpose: Show full conversation between two users (like Instagram DM thread).\n\nLayout:\n- Header: Back button → Mailbox, Other user’s avatar + name\n- Messages area:\n - Messages stacked chronologically\n - Sent messages aligned to right, received messages to left\n - Each message bubble shows text + timestamp\n- Composer:\n - Text input\n - Send button\n - (Optional) File/image upload for attachments\n\nAPI:\n- Fetch chat history: GET /users/me/messages/:otherUserId\n- Send message: POST /users/me/messages/:otherUserId\n json\n { \"text\": \"Hello!\" }\n \n- Mark as read: PATCH /users/me/messages/:otherUserId/read\n\nRealtime (Optional for MVP):\n- Poll GET /users/me/messages/:otherUserId every few seconds OR use WebSocket if backend supports.\n\n---\n\n### 3. Integration with Existing Pages\n- index.html: Navbar → Add Messages link (visible only when logged in)\n- profile.html: Add shortcut button → “My Messages” → messages.html\n- creator.html: Add Message button → opens chat.html?user=<creatorId>\n\n---\n\n## Theme & Styling\n- Primary Theme: Light blue gradient (to match SUI coin branding)\n- Example gradient:\n css\n body {\n background: linear-gradient(135deg, #6EC1E4, #A7D8F9);\n font-family: sans-serif;\n color: #1a2a44;\n }\n .message-bubble.sent { background: #4da6ff; color: #fff; }\n .message-bubble.received { background: #e6f3ff; color: #1a2a44; }\n .btn-primary { background: #3399ff; color: white; border: none; padding: 8px 16px; border-radius: 6px; }\n \n- Keep UI clean, modern, and similar in feel to Instagram’s messaging interface.\n\n---\n\n## Next Steps\n1. Create messages.html and chat.html pages with the layouts above.\n2. Wire to backend endpoints for /users/me/messages and /users/me/messages/:id.\n3. Add auth checks with getToken() before rendering.\n4. Style all pages with light blue gradient theme for SUI branding.\n5. Test flows:\n - User A registers as CREATOR → posts content.\n - User B registers as SUPPORTER → visits creator.html, clicks Message, sends message.\n - User A sees conversation in messages.html with the most recent message preview.\n - Clicking conversation opens full thread in chat.html